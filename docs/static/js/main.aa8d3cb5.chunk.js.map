{"version":3,"sources":["components/Node.js","components/ListEntry.js","components/App.js","serviceWorker.js","index.js"],"names":["Node","id","prefList","x","y","this","partner","i","length","getId","setCurrentPartner","crossOut","idIndex","isFemale","Error","pref","isCrossedOut","ListEntry","isCurrentPartner","crossedOut","partnerStatus","App","useState","currState","setCurrState","currPage","setCurrPage","nodeCountPerGender","setNodeCountPerGender","editNodeCount","setEditNodeCount","editMalePrefList","setEditMalePrefList","editFemalePrefList","setEditFemalePrefList","finishedPairs","setFinishedPairs","maleProposalIndex","setMaleProposalIndex","pastMales","setPastMales","males","setMales","females","setFemales","fixedLines","setFixedLines","selectedMaleEdit","setSelectedMaleEdit","selectedFemaleEdit","setSelectedFemaleEdit","timerInterval","setTimerInterval","callbackTime","setCallbackTime","resumeShown","setResumeShown","idBank","clickRef","React","useRef","createPrefList","index","gender","defaultPrefList","Array","from","_","map","reverse","getPrefList","drawAPrefBox","p5","prefNode","currX","boxY","fill","color","isPartner","rect","nodeDiameter","boxMiddleX","boxWidth","boxMiddleY","text","String","drawPrefList","node","leftDraw","currBoxX","getY","getX","boxDivision","findAndSetProposal","maleProposer","proposalId","currentFemales","female","getPartner","getRankInList","setPartner","setAsCurrentPartnerInList","drawNode","ellipse","drawState","width","height","maleList","femaleList","currentHeightOfNode","maleXAxis","femaleXAxis","push","setupStartState","currentMales","proposingMale","proposedFemaleId","getFirstAvailablePref","proposedFemale","crossFromPrefList","line","setProposalStatus","maleNode","femaleNode","permaLine","x1","y1","x2","y2","isInFixedLines","male","combo","createDefault","num","idBankCopy","filter","showEditPreferenceLists","people","numArr","shownId","person","personIndex","Col","md","Row","ListGroup","numIndex","Item","active","onClick","indexToSwap","peopleList","temp","setPrefList","swapPrefId","style","showSelectable","value","onChange","e","target","className","Button","display","ref","timer","setInterval","current","click","verifyAndFixMatching","currentMale","pastMalePartner","finishedPairsCopy","undefined","includes","currentLines","addFixedLineEligible","partnerMap","getMalePartnerMap","clearInterval","onBeforeChange","onAfterChange","setup","parent","window","screen","createCanvas","setupSketch","draw","background","drawSketch","horizontal","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa8d3cb5.chunk.js","sourcesContent":["export default class Node {\n  constructor(id, prefList, x, y) {\n    this.id = id;\n    this.prefList = prefList;\n    this.x = x;\n    this.y = y;\n    this.partner = null;\n  }\n\n  getX() {\n    return this.x;\n  }\n\n  getY() {\n    return this.y;\n  }\n\n  setId(id) {\n    this.id = id;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  crossFromPrefList(id) {\n    for (let i = 0; i < this.prefList.length; i++) {\n      if (this.prefList[i].getId() === id) {\n        this.prefList[i].setCurrentPartner(false);\n        this.prefList[i].crossOut();\n        break;\n      }\n    }\n  }\n\n  setAsCurrentPartnerInList(id, isFemale = true) {\n    let idIndex;\n    for (let i = 0; i < this.prefList.length; i++) {\n      if (this.prefList[i].getId() === id) {\n        this.prefList[i].setCurrentPartner(true);\n        idIndex = i;\n      } else {\n        this.prefList[i].setCurrentPartner(false);\n        if (i > idIndex && isFemale) this.prefList[i].crossOut();\n      }\n    }\n  }\n\n  setPrefList(prefList) {\n    this.prefList = prefList;\n  }\n\n  getPrefList() {\n    return this.prefList;\n  }\n\n  getRankInList(partner) {\n    for (let i = 0; i < this.prefList.length; i++) {\n      if (this.prefList[i].getId() === partner.getId()) return i;\n    }\n    throw Error(\"COULD NOT FIND RANK\");\n  }\n\n  // Pretty much a female only method\n  setPartner(partner) {\n    this.partner = partner;\n  }\n\n  // Male only method\n  getFirstAvailablePref() {\n    for (let pref of this.prefList) {\n      if (!pref.isCrossedOut()) {\n        return pref.getId();\n      }\n    }\n    throw new Error(\"COULD NOT GET A PREF\");\n  }\n\n  getPartner() {\n    return this.partner;\n  }\n}\n","export default class ListEntry {\n  constructor(id) {\n    this.id = id;\n    this.isCurrentPartner = false;\n    this.crossedOut = false;\n  }\n\n  isPartner() {\n    return this.isCurrentPartner;\n  }\n\n  isCrossedOut() {\n    return this.crossedOut;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  setCurrentPartner(partnerStatus) {\n    this.isCurrentPartner = partnerStatus;\n  }\n\n  crossOut() {\n    this.crossedOut = true;\n  }\n}\n","import React, { useState } from \"react\";\nimport Sketch from \"react-p5\";\nimport Node from \"./Node\";\nimport ListEntry from \"./ListEntry\";\nimport { ListGroup, Row, Col, Button } from \"react-bootstrap\";\nimport \"rc-slider/assets/index.css\";\nimport Slider from \"rc-slider\";\nimport \"../css/App.css\";\n\nconst App = () => {\n  const nodeDiameter = 50;\n  const boxWidth = nodeDiameter / 2;\n  const boxDivision = boxWidth * 1.2;\n  const nodeDivision = nodeDiameter * 2;\n  const [MALE, FEMALE] = [0, 1];\n  const [MAIN, EDIT] = [0, 1];\n  const [BEFORE, DURING, DONE] = [0, 1, 2];\n  const [currState, setCurrState] = useState(BEFORE);\n  const [currPage, setCurrPage] = useState(MAIN);\n  const [nodeCountPerGender, setNodeCountPerGender] = useState(6);\n  const [editNodeCount, setEditNodeCount] = useState(nodeCountPerGender);\n  const [editMalePrefList, setEditMalePrefList] = useState([]);\n  const [editFemalePrefList, setEditFemalePrefList] = useState([]);\n  const [finishedPairs, setFinishedPairs] = useState([]);\n  const [maleProposalIndex, setMaleProposalIndex] = useState(0);\n  const [pastMales, setPastMales] = useState({});\n  const [males, setMales] = useState([]);\n  const [females, setFemales] = useState([]);\n  const [fixedLines, setFixedLines] = useState([]);\n  const [selectedMaleEdit, setSelectedMaleEdit] = useState(\"A\");\n  const [selectedFemaleEdit, setSelectedFemaleEdit] = useState(\"A\");\n  const [timerInterval, setTimerInterval] = useState(null);\n  const [callbackTime, setCallbackTime] = useState(1000);\n  const [resumeShown, setResumeShown] = useState(false);\n  const idBank = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n  const clickRef = React.useRef(null);\n\n  const setupSketch = (p5, parent) => {\n    const width = window.screen.width / 1.1;\n    const height = window.screen.height / 1.4;\n    p5.createCanvas(width, height).parent(parent);\n  };\n\n  const createPrefList = (index, gender) => {\n    if (editMalePrefList.length === 0 && editFemalePrefList.length === 0) {\n      let defaultPrefList = Array.from(\n        new Array(nodeCountPerGender),\n        (_, i) => i\n      ).map(index => new ListEntry(idBank[index]));\n      if (gender === FEMALE) defaultPrefList.reverse();\n      return defaultPrefList;\n    } else {\n      let genderList =\n        gender === MALE ? editMalePrefList[index] : editFemalePrefList[index];\n      return genderList.getPrefList();\n    }\n  };\n\n  const setupStartState = (width, height) => {\n    let maleList = [];\n    let femaleList = [];\n    let currentHeightOfNode = height / nodeCountPerGender;\n    const maleXAxis = width / 4;\n    const femaleXAxis = (3 * width) / 4;\n    for (let i = 0; i < nodeCountPerGender; i++) {\n      maleList.push(\n        new Node(\n          idBank[i],\n          createPrefList(i, MALE),\n          maleXAxis,\n          currentHeightOfNode\n        )\n      );\n      femaleList.push(\n        new Node(\n          idBank[i],\n          createPrefList(i, FEMALE),\n          femaleXAxis,\n          currentHeightOfNode\n        )\n      );\n      currentHeightOfNode += nodeDivision;\n    }\n    setMales(maleList);\n    setFemales(femaleList);\n  };\n\n  const drawAPrefBox = (p5, prefNode, currX, boxY) => {\n    if (prefNode.isCrossedOut()) {\n      p5.fill(p5.color(\"red\"));\n    } else if (prefNode.isPartner()) {\n      p5.fill(p5.color(\"green\"));\n    } else {\n      p5.fill(p5.color(\"white\"));\n    }\n    p5.rect(currX, boxY, boxWidth, boxWidth);\n    const boxMiddleX = currX + boxWidth / 2;\n    const boxMiddleY = boxY + boxWidth / 2;\n    p5.fill(p5.color(\"black\"));\n    p5.text(String(prefNode.getId()), boxMiddleX, boxMiddleY);\n  };\n\n  const drawPrefList = (p5, node, leftDraw) => {\n    const prefList = node.getPrefList();\n\n    let currBoxX;\n    const boxY = node.getY();\n\n    if (leftDraw) {\n      currBoxX = node.getX() - boxDivision * 2;\n      for (let i = prefList.length - 1; i >= 0; i--) {\n        drawAPrefBox(p5, prefList[i], currBoxX, boxY);\n        currBoxX -= boxDivision;\n      }\n    } else {\n      currBoxX = node.getX() + boxDivision;\n      for (const pref of prefList) {\n        drawAPrefBox(p5, pref, currBoxX, boxY);\n        currBoxX += boxDivision;\n      }\n    }\n  };\n\n  const findAndSetProposal = (maleProposer, proposalId) => {\n    let currentFemales = females;\n    for (let female of currentFemales) {\n      if (female.getId() === proposalId) {\n        if (\n          female.getPartner() === null ||\n          female.getRankInList(maleProposer) <=\n            female.getRankInList(female.getPartner())\n        ) {\n          female.setPartner(maleProposer);\n          female.setAsCurrentPartnerInList(maleProposer.getId());\n          setFemales(currentFemales);\n          return female;\n        }\n        return null;\n      }\n    }\n    throw new Error(\"NO ID FOUND\");\n  };\n\n  const setProposalStatus = p5 => {\n    if (males.length > 0 && females.length > 0) {\n      let currentMales = males;\n      const proposingMale = currentMales[maleProposalIndex];\n      let proposedFemaleId = proposingMale.getFirstAvailablePref();\n      let proposedFemale = findAndSetProposal(proposingMale, proposedFemaleId);\n      while (proposedFemale === null) {\n        proposingMale.crossFromPrefList(proposedFemaleId);\n        proposedFemaleId = proposingMale.getFirstAvailablePref();\n        proposedFemale = findAndSetProposal(proposingMale, proposedFemaleId);\n      }\n      proposingMale.setPartner(proposedFemale);\n      proposingMale.setAsCurrentPartnerInList(proposedFemaleId, false);\n      p5.fill(p5.color(\"black\"));\n      p5.line(\n        proposingMale.getX(),\n        proposingMale.getY(),\n        proposedFemale.getX(),\n        proposedFemale.getY()\n      );\n\n      setMales(currentMales);\n    }\n  };\n\n  const drawNode = (p5, node) => {\n    p5.fill(p5.color(\"white\"));\n    p5.ellipse(node.getX(), node.getY(), nodeDiameter);\n    p5.fill(p5.color(\"black\"));\n    p5.text(String(node.getId()), node.getX(), node.getY());\n  };\n\n  const drawState = p5 => {\n    if (males.length === 0 && females.length === 0) {\n      setupStartState(p5.width, p5.height);\n    }\n\n    if (currState === DURING) setProposalStatus(p5);\n\n    for (const maleNode of males) {\n      drawPrefList(p5, maleNode, true);\n      drawNode(p5, maleNode);\n    }\n\n    for (const femaleNode of females) {\n      drawPrefList(p5, femaleNode, false);\n      drawNode(p5, femaleNode);\n    }\n\n    for (const permaLine of fixedLines) {\n      p5.line(permaLine.x1, permaLine.y1, permaLine.x2, permaLine.y2);\n    }\n  };\n\n  const checkIfAlgorithimDone = () => fixedLines.length === nodeCountPerGender;\n\n  const drawSketch = p5 => {\n    p5.background(0, 196, 255);\n    drawState(p5);\n  };\n\n  const addFixedLineEligible = () => {\n    const currentMale = males[maleProposalIndex];\n    const pastMalePartner = pastMales[currentMale.getId()];\n    let finishedPairsCopy = finishedPairs;\n    if (\n      pastMalePartner !== undefined &&\n      currentMale.getPartner().getId() === pastMalePartner &&\n      !finishedPairsCopy.includes(currentMale.getId())\n    ) {\n      finishedPairsCopy.push(currentMale.getId());\n      let currentLines = fixedLines;\n      currentLines.push({\n        x2: currentMale.getPartner().getX(),\n        y2: currentMale.getPartner().getY(),\n        x1: currentMale.getX(),\n        y1: currentMale.getY()\n      });\n      setFinishedPairs(finishedPairsCopy);\n      setFixedLines(currentLines);\n    }\n  };\n\n  const getMalePartnerMap = () => {\n    let partnerMap = {};\n    for (const male of males) {\n      partnerMap[male.getId()] = male.getPartner().getId();\n    }\n    return partnerMap;\n  };\n\n  const isInFixedLines = (male, female) => {\n    for (const combo of fixedLines) {\n      if (\n        combo.x1 === male.getX() &&\n        combo.y1 === male.getY() &&\n        combo.x2 === female.getX() &&\n        combo.y2 === female.getY()\n      )\n        return true;\n    }\n    return false;\n  };\n\n  const verifyAndFixMatching = () => {\n    for (const male of males) {\n      if (!isInFixedLines(male, male.getPartner())) {\n        setFixedLines([]);\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const showMain = () => {\n    return (\n      <div>\n        {currState === DONE ? <div>Finished Algorithim</div> : null}\n        {currState === DURING ? <div>Running Algorithim</div> : null}\n        {currState !== DONE ? (\n          <Button\n            style={\n              currState === DURING && !resumeShown ? { display: \"none\" } : {}\n            }\n            ref={clickRef}\n            onClick={() => {\n              setResumeShown(false);\n              if (timerInterval === null) {\n                const timer = setInterval(\n                  () => clickRef.current.click(),\n                  callbackTime\n                );\n                setTimerInterval(timer);\n              }\n              if (currState === BEFORE) setCurrState(DURING);\n              else if (currState === DURING) {\n                if (checkIfAlgorithimDone() && verifyAndFixMatching()) {\n                  setCurrState(DONE);\n                } else {\n                  addFixedLineEligible();\n                  if (maleProposalIndex >= nodeCountPerGender - 1)\n                    setPastMales(getMalePartnerMap());\n                  setMaleProposalIndex(\n                    (maleProposalIndex + 1) % nodeCountPerGender\n                  );\n                }\n              }\n            }}\n          >\n            {currState === BEFORE ? \"Start\" : \"Resume\"}\n          </Button>\n        ) : (\n          clearInterval(timerInterval)\n        )}\n        {currState === DURING || currState === DONE ? (\n          <Button\n            onClick={() => {\n              setMales([]);\n              setFemales([]);\n              setEditMalePrefList([]);\n              setEditFemalePrefList([]);\n              setFixedLines([]);\n              setFinishedPairs([]);\n              setPastMales({});\n              setMaleProposalIndex(0);\n              setCallbackTime(1000);\n              clearInterval(timerInterval);\n              setTimerInterval(null);\n              setResumeShown(false);\n              setCurrState(BEFORE);\n            }}\n          >\n            Reset\n          </Button>\n        ) : null}\n        {currState === BEFORE ? (\n          <Button\n            onClick={() => {\n              setEditMalePrefList(males);\n              setEditFemalePrefList(females);\n              setEditNodeCount(nodeCountPerGender);\n              setCurrPage(EDIT);\n            }}\n          >\n            To Edit\n          </Button>\n        ) : null}\n        {currState === DURING ? (\n          <Slider\n            onBeforeChange={() => {\n              clearInterval(timerInterval);\n              setTimerInterval(null);\n              setResumeShown(true);\n            }}\n            onAfterChange={value => {\n              const time = 1000 - value * 9;\n              setCallbackTime(time);\n            }}\n          />\n        ) : null}\n        <Sketch\n          setup={(p5, parent) => setupSketch(p5, parent)}\n          draw={p5 => drawSketch(p5)}\n        />\n      </div>\n    );\n  };\n\n  const createDefault = (num, gender) => {\n    let idBankCopy = idBank.filter((_, index) => index + 1 <= num);\n    return idBankCopy.map(id => {\n      let prefList = idBankCopy.map(id => new ListEntry(id));\n      if (gender === FEMALE) prefList.reverse();\n      return new Node(id, prefList, null, null);\n    });\n  };\n\n  const showNodeCountSelection = () => {\n    return (\n      <ListGroup horizontal>\n        {[2, 3, 4, 5, 6].map(num => (\n          <ListGroup.Item\n            onClick={() => {\n              setEditMalePrefList(createDefault(num, MALE));\n              setEditFemalePrefList(createDefault(num, FEMALE));\n              setSelectedMaleEdit(\"A\");\n              setSelectedFemaleEdit(\"A\");\n              setEditNodeCount(num);\n            }}\n            style={{ color: \"black\" }}\n            active={editNodeCount === num}\n          >\n            {num}\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    );\n  };\n\n  const swapPrefId = (personIndex, index, indexToSwap, gender) => {\n    let peopleList = gender === MALE ? editMalePrefList : editFemalePrefList;\n    let prefList = peopleList[personIndex].getPrefList();\n    const temp = prefList[index];\n    prefList[index] = prefList[indexToSwap];\n    prefList[indexToSwap] = temp;\n    peopleList[personIndex].setPrefList(prefList);\n    if (gender === MALE) {\n      setEditMalePrefList(peopleList);\n    } else {\n      setEditFemalePrefList(peopleList);\n    }\n    setMales([]);\n    setFemales([]);\n  };\n\n  const showEditPreferenceLists = (people, gender) => {\n    const numArr = Array.from(new Array(editNodeCount), (_, i) => i).map(\n      index => index + 1\n    );\n    const shownId = gender === MALE ? selectedMaleEdit : selectedFemaleEdit;\n    return people.map((person, personIndex) => {\n      return person.getId() === shownId ? (\n        <Col>\n          <Col md=\"auto\">\n            <Row>\n              {person.getPrefList().map((pref, index) => {\n                return (\n                  <div>\n                    <div>{pref.getId()}</div>\n                    <ListGroup>\n                      {numArr.map(numIndex => {\n                        return (\n                          <ListGroup.Item\n                            active={\n                              person.getPrefList()[numIndex - 1].getId() ===\n                              pref.getId()\n                            }\n                            onClick={() =>\n                              swapPrefId(\n                                personIndex,\n                                index,\n                                numIndex - 1,\n                                gender\n                              )\n                            }\n                            style={{ color: \"black\" }}\n                          >\n                            {numIndex}\n                          </ListGroup.Item>\n                        );\n                      })}\n                    </ListGroup>\n                  </div>\n                );\n              })}\n            </Row>\n          </Col>\n        </Col>\n      ) : null;\n    });\n  };\n\n  const showSelectable = gender => {\n    return (\n      <select\n        value={gender === MALE ? selectedMaleEdit : selectedFemaleEdit}\n        onChange={e =>\n          gender === MALE\n            ? setSelectedMaleEdit(e.target.value)\n            : setSelectedFemaleEdit(e.target.value)\n        }\n      >\n        {idBank\n          .filter((_, index) => index + 1 <= editNodeCount)\n          .map(value => (\n            <option value={value}>{value}</option>\n          ))}\n      </select>\n    );\n  };\n\n  const showEdit = () => {\n    return (\n      <div>\n        <Button\n          onClick={() => {\n            setMales([]);\n            setFemales([]);\n            setFixedLines([]);\n            setPastMales({});\n            setFinishedPairs([]);\n            setCallbackTime(1000);\n            setMaleProposalIndex(0);\n            setResumeShown(false);\n            setNodeCountPerGender(editNodeCount);\n            setCurrPage(MAIN);\n          }}\n        >\n          Back to main page\n        </Button>\n        <div>Select Node Count Per Gender</div>\n        {showNodeCountSelection()}\n        <div>Edit Male Preference Lists</div>\n        {showSelectable(MALE)}\n        {showEditPreferenceLists(editMalePrefList, MALE)}\n        <div>Edit Female Preference Lists</div>\n        {showSelectable(FEMALE)}\n        {showEditPreferenceLists(editFemalePrefList, FEMALE)}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {currPage === MAIN ? showMain() : showEdit()}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}